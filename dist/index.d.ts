import { EnvVariableMissingError } from './classes/error';
import { EnvVariableInvalidError } from './classes/error';
import { SettingReader } from './classes/settingreader';
import { SettingReaderOptions } from './classes/settingreaderoptions';
import { SettingReaderOptionsForURL } from './classes/settingreaderoptions';
declare const string: (name: string, defaultValue?: string, opts?: SettingReaderOptions<string>) => string;
declare const stringList: (name: string, defaultValue?: string[], opts?: SettingReaderOptions<string>) => string[];
declare const integer: (name: string, defaultValue?: number, opts?: SettingReaderOptions<number>) => number;
declare const integerList: (name: string, defaultValue?: number[], opts?: SettingReaderOptions<number>) => number[];
declare const float: (name: string, defaultValue?: number, opts?: SettingReaderOptions<number>) => number;
declare const floatList: (name: string, defaultValue?: number[], opts?: SettingReaderOptions<number>) => number[];
declare const stringEnum: (name: string, defaultValue?: string, opts?: SettingReaderOptions<string>) => string;
declare const stringEnumList: (name: string, defaultValue?: string[], opts?: SettingReaderOptions<string>) => string[];
declare const integerEnum: (name: string, defaultValue?: number, opts?: SettingReaderOptions<number>) => number;
declare const integerEnumList: (name: string, defaultValue?: number[], opts?: SettingReaderOptions<number>) => number[];
declare const boolean: (name: string, defaultValue?: boolean, opts?: SettingReaderOptions<boolean>) => boolean;
declare const booleanList: (name: string, defaultValue?: boolean[], opts?: SettingReaderOptions<boolean>) => boolean[];
declare const url: (name: string, defaultValue?: URL, opts?: SettingReaderOptionsForURL) => URL;
declare const urlList: (name: string, defaultValue?: URL[], opts?: SettingReaderOptionsForURL) => URL[];
declare const date: (name: string, defaultValue?: Date, opts?: SettingReaderOptions<Date>) => Date;
declare const dateList: (name: string, defaultValue?: Date[], opts?: SettingReaderOptions<Date>) => Date[];
export { string, stringList, integer, integerList, float, floatList, stringEnum, stringEnumList, integerEnum, integerEnumList, boolean, booleanList, url, urlList, date, dateList, SettingReader, SettingReaderOptions, SettingReaderOptionsForURL, EnvVariableMissingError, EnvVariableInvalidError, };
